{"version":3,"sources":["api/constants.ts","api/index.ts","api/prices.ts","api/toplists.ts","api/coinInfo.ts","store/coinInfo/selectors/index.ts","constants.ts","store/topCoinsList/actions/index.ts","store/topCoinsList/selectors/index.ts","components/TopCoinsTable/index.tsx","components/Loader/index.tsx","store/currencyConverter/selectors/index.ts","store/currencyConverter/actions/index.ts","components/Input/index.tsx","components/Select/index.tsx","components/CurrencyConverterForm/index.tsx","containers/CurrencyConverter/index.tsx","pages/HomePage/index.tsx","store/coinInfo/actions/index.ts","pages/CoinPage/index.tsx","components/Header/index.tsx","App.tsx","store/topCoinsList/reducers/index.ts","store/currencyConverter/reducers/index.ts","store/coinInfo/reducers/index.ts","store/index.ts","index.tsx"],"names":["BASE_URL","api","prices","getPrice","coin","targetCoin","url","axios","get","then","data","catch","e","console","error","toplists","getTopListByMarketCap","limit","getTopListByTierVolume","coinInfo","getCoinInfo","coinCode","targetCoinCode","getCoinsBaseInfo","coinInfoSelector","state","isFetchingSelector","isFetching","targetCoinCodeSelector","realCurrencies","USD","RUB","EUR","currencies","defaultCurrencies","crypto","getCoinsFailure","type","payload","coinsSelector","topCoinsList","coins","TopCoinsTable","className","scope","map","index","key","code","to","src","imageUrl","alt","name","price","directVol","totalVol","mktcap","Loader","center","small","classNames","role","priceSelector","currencyConverter","currencyCodeSelector","currencyCode","currencyTargetCodeSelector","currencyTargetCode","getPriceFailure","Input","placeholder","value","onChange","valueType","input","currentTarget","replace","Select","options","CurrencyConverterForm","useState","firstFieldValue","setFirstFieldValue","secondFieldValue","setSecondFieldValue","useMemo","Object","entries","changeFirstInput","newValue","toString","changeTargetInput","useEffect","connect","currency","targetCurrency","dispatch","a","response","getCoins","getState","Data","Type","CoinInfo","Name","FullName","DISPLAY","PRICE","VOLUME24HOURTO","split","TOTALVOLUME24HTO","MKTCAP","ImageUrl","intervalUpdate","setInterval","clearInterval","length","getCoinInfoFailure","raw","RAW","Response","IMAGEURL","resetCoinInfo","match","params","toUpperCase","validCoinCode","Header","res","newCurrencies","coinsEntries","row","SYMBOL","NAME","fromEntries","log","exact","path","component","HomePage","CoinPage","from","initialState","_error","topCoinsReducer","action","currencyConverterReducer","CoinInfoReducer","rootReducer","combineReducers","topCoinsListReducer","coinInfoReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd8f2422.chunk.js","sourcesContent":["export const BASE_URL = 'https://min-api.cryptocompare.com/data/'\r\nexport const BASE_URL_v2 = 'https://min-api.cryptocompare.com/data/v2/'","import prices from './prices'\r\nimport toplists from './toplists'\r\nimport coinInfo from './coinInfo'\r\n\r\nconst api = {\r\n  prices,\r\n  toplists,\r\n  coinInfo\r\n}\r\n\r\nexport default api","import { TCoinCode } from './../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getPrice: (coin: TCoinCode, targetCoin: TCoinCode) => {\r\n    const url = `${BASE_URL}price?fsym=${coin}&tsyms=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { TCoinCode } from '../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getTopListByMarketCap: (limit: number = 10, targetCoin: TCoinCode = 'USD') => {\r\n    const url = `${BASE_URL}top/mktcapfull?limit=${limit}&tsym=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  },\r\n  getTopListByTierVolume: (limit: number = 10, targetCoin: TCoinCode) => {\r\n    const url = `${BASE_URL}top/totaltoptiervolfull?limit=${limit}&tsym=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  },\r\n  \r\n}","import { TCoinCode } from './../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getCoinInfo: (coinCode: TCoinCode, targetCoinCode: TCoinCode) => {\r\n    const url = `${BASE_URL}pricemultifull?fsyms=${coinCode}&tsyms=${targetCoinCode}`\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  },\r\n  getCoinsBaseInfo: (limit: number = 100, targetCoinCode: TCoinCode) => {\r\n    const url = `${BASE_URL}top/volumes?extraParams=https:%2F%2Fwww.cryptocompare.com&limit=${limit}&tsym=${targetCoinCode}`\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { TRootState } from './../../index';\r\n\r\nexport const coinInfoSelector = (state: TRootState) => state.coinInfo.coinInfo\r\nexport const isFetchingSelector = (state: TRootState) => state.coinInfo.isFetching\r\nexport const targetCoinCodeSelector = (state: TRootState) => state.coinInfo.targetCoinCode","import defaultCurrencies from './assets/defaultCurrencies.json'\r\n\r\nexport const imagesUrlServer = 'https://www.cryptocompare.com'\r\n\r\nexport const realCurrencies = {\r\n  USD: 'United States Dollar',\r\n  RUB: 'Russian Ruble',\r\n  EUR: 'Euro'\r\n}\r\n\r\nexport let currencies = {\r\n  ...realCurrencies,\r\n  ...defaultCurrencies.crypto\r\n}\r\n\r\nexport const setCurrencies = (newCurrencies: any) => {\r\n  currencies = {\r\n    ...realCurrencies,\r\n    ...newCurrencies\r\n  }\r\n}","import { TRootState } from './../../index';\r\nimport { imagesUrlServer } from './../../../constants';\r\nimport { TCoinInfo } from './../../../types';\r\nimport { Dispatch } from 'redux'\r\nimport api from '../../../api'\r\n\r\nconst GET_COINS_REQUEST = 'TOP_COINS/GET_COINS:REQUEST'\r\nconst GET_COINS_SUCCESS = 'TOP_COINS/GET_COINS:SUCCESS'\r\nconst GET_COINS_FAILURE = 'TOP_COINS/GET_COINS:FAILURE'\r\n\r\nexport type TActions = TGetCoinsRequest | TGetCoinsSuccess | TGetCoinsFailure\r\n\r\ntype TGetCoinsRequest = { type: typeof GET_COINS_REQUEST }\r\nconst getCoinsRequest = (): TGetCoinsRequest => ({\r\n  type: GET_COINS_REQUEST\r\n})\r\n\r\ntype TGetCoinsFailure = { type: typeof GET_COINS_FAILURE, payload: string }\r\nconst getCoinsFailure = (error: string): TGetCoinsFailure => ({\r\n  type: GET_COINS_FAILURE,\r\n  payload: error\r\n})\r\n\r\ntype TGetCoinsSuccess = { type: typeof GET_COINS_SUCCESS, payload: TCoinInfo[] }\r\nconst getCoinsSuccess = (payload: TCoinInfo[]): TGetCoinsSuccess => ({\r\n  type: GET_COINS_SUCCESS,\r\n  payload\r\n})\r\n\r\nexport const getCoins = () => async (dispatch: Dispatch, getState: ()=>TRootState) => {\r\n  dispatch(getCoinsRequest())\r\n\r\n  try {\r\n    const targetCoinCode = getState().coinInfo.targetCoinCode\r\n    const limit = 10\r\n\r\n    const response = await api.toplists.getTopListByTierVolume(limit, targetCoinCode)\r\n    const data = response.Data as any[]\r\n\r\n    if (response.Type === 100) {\r\n      const coins: TCoinInfo[] = data.map(coin => ({\r\n        code: coin.CoinInfo.Name,\r\n        name: coin.CoinInfo.FullName,\r\n        price: coin.DISPLAY.USD.PRICE,\r\n        directVol: coin.DISPLAY.USD.VOLUME24HOURTO.replace(/[,]/gi, ' ').split('.')[0],\r\n        totalVol: coin.DISPLAY.USD.TOTALVOLUME24HTO,\r\n        mktcap: coin.DISPLAY.USD.MKTCAP,\r\n        imageUrl: imagesUrlServer + coin.CoinInfo.ImageUrl\r\n      }))\r\n\r\n      dispatch(getCoinsSuccess(coins))\r\n    } else {\r\n      getCoinsFailure('Cannot load data from server.')\r\n    }\r\n  } catch (e) {\r\n    getCoinsFailure(e)\r\n  }\r\n}\r\n\r\n","import { TRootState } from '../..'\r\n\r\nexport const coinsSelector = (state: TRootState) => state.topCoinsList.coins\r\nexport const isFetchingSelector = (state: TRootState) => state.topCoinsList.isFetching","import React from 'react'\r\nimport { TCoinInfo } from '../../types'\r\n\r\nimport './topCoinsTable.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype TProps = {\r\n  coins: TCoinInfo[],\r\n}\r\n\r\nconst TopCoinsTable: React.FC<TProps> = ({ coins }) => (\r\n  <div className=\"top-coins\">\r\n    <h2>Top 10 crypto currency</h2>\r\n\r\n    <table className=\"table top-coins-table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col-2\">#</th>\r\n          <th scope=\"col\">Name</th>\r\n          <th scope=\"col\">Price</th>\r\n          <th scope=\"col\">Direct Vol</th>\r\n          <th scope=\"col\">Total Vol</th>\r\n          <th scope=\"col\">Market cap.</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {coins.map((coin, index) => (\r\n          <tr key={coin.code}>\r\n            <th scope=\"row\">{++index}</th>\r\n            <td>\r\n              <Link to={`coins/${coin.code}`} className='top-coins__coin-name'>\r\n                <img className='top-coins__coin-image' src={coin.imageUrl} alt='coin logo' />\r\n                <span className='top-coins__coin-text'>\r\n                  <strong>{coin.code}</strong>\r\n                  <br />\r\n                  <small>{coin.name}</small>\r\n                </span>\r\n              </Link>\r\n            </td>\r\n            <td>{coin.price}</td>\r\n            <td>{coin.directVol}</td>\r\n            <td>{coin.totalVol}</td>\r\n            <td>{coin.mktcap}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n)\r\n\r\nexport default TopCoinsTable\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\ntype TProps = {\r\n  className?: string\r\n  center?: boolean,\r\n  small?: boolean\r\n}\r\n\r\nconst Loader: React.FC<TProps> = ({ className, center = true, small = false }) => {\r\n  return (\r\n    <div className={classNames('loader', { \"d-flex justify-content-center\": center }, className)}>\r\n\r\n      <div className={classNames(\"spinner-border\", { 'spinner-border-sm': small })} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import { TRootState } from '../..'\r\n\r\nexport const priceSelector = (state: TRootState) => state.currencyConverter.price\r\nexport const isFetchingSelector = (state: TRootState) => state.currencyConverter.isFetching\r\nexport const currencyCodeSelector = (state: TRootState) => state.currencyConverter.currencyCode\r\nexport const currencyTargetCodeSelector = (state: TRootState) => state.currencyConverter.currencyTargetCode","import { TCoinCode } from './../../../types';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../../api'\r\n\r\nconst GET_PRICE_REQUEST = 'CURRENCY_CONVERTER/GET_PRICE:REQUEST'\r\nconst GET_PRICE_SUCCESS = 'CURRENCY_CONVERTER/GET_PRICE:SUCCESS'\r\nconst GET_PRICE_FAILURE = 'CURRENCY_CONVERTER/GET_PRICE:FAILURE'\r\n\r\ntype TGetPriceRequest = { type: typeof GET_PRICE_REQUEST }\r\nconst getPriceRequest = (): TGetPriceRequest => ({\r\n  type: GET_PRICE_REQUEST\r\n})\r\n\r\ntype TGetPriceFailure = { type: typeof GET_PRICE_FAILURE, payload: string }\r\nconst getPriceFailure = (error: string): TGetPriceFailure => ({\r\n  type: GET_PRICE_FAILURE,\r\n  payload: error\r\n})\r\n\r\ntype TGetPriceSuccess = { type: typeof GET_PRICE_SUCCESS, payload: TGetPriceSuccessPayload }\r\ntype TGetPriceSuccessPayload = {\r\n  price: number,\r\n  currencyCode: TCoinCode,\r\n  currencyTargetCode: TCoinCode,\r\n}\r\nconst getPriceSuccess = (payload: TGetPriceSuccessPayload): TGetPriceSuccess => ({\r\n  type: GET_PRICE_SUCCESS,\r\n  payload\r\n})\r\n\r\nexport type TActions = TGetPriceRequest | TGetPriceFailure | TGetPriceSuccess\r\n\r\nexport const getPrice = (currency: TCoinCode, targetCurrency: TCoinCode) => async (dispatch: Dispatch) => {\r\n  dispatch(getPriceRequest())\r\n\r\n  try {\r\n    const response = await api.prices.getPrice(currency, targetCurrency)\r\n    const data: number = response[targetCurrency]\r\n\r\n    if (data) {\r\n      dispatch(getPriceSuccess({\r\n        price: data,\r\n        currencyCode: currency,\r\n        currencyTargetCode: targetCurrency\r\n      }))\r\n    } else {\r\n      getPriceFailure('Cannot load data from server.')\r\n    }\r\n  } catch (e) {\r\n    getPriceFailure(e)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './input.scss'\r\n\r\ntype TProps = {\r\n  value: string,\r\n  onChange: (newValue: string) => void,\r\n\r\n  valueType?: 'number',\r\n  placeholder?: string,\r\n  type?: string,\r\n  className?: string,\r\n}\r\n\r\nconst Input: React.FC<TProps> = ({ className, placeholder, value, onChange, type, valueType }) => {\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let input = e.currentTarget.value\r\n    if (valueType === 'number') {\r\n      input = input.replace(/[^.\\d]+/g, \"\").replace(/^([^\\.]*\\.)|\\./g, '$1') // eslint-disable-line\r\n    }\r\n    onChange(input)\r\n  }\r\n\r\n  return (\r\n    <input\r\n      className={classNames('form-control', className)}\r\n      placeholder={placeholder}\r\n      type={type || 'text'}\r\n\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\ntype TProps = {\r\n  value: string,\r\n  onChange: (newValue: string) => void,\r\n  options: JSX.Element[],\r\n\r\n  className?: string,\r\n}\r\n\r\nconst Select: React.FC<TProps> = ({ value, onChange, options, className }) => {\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    onChange(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <select\r\n      className={classNames(\"custom-select\", className)}\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n    >{options}</select>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\n\r\nimport './currencyConverterForm.scss'\r\nimport { TCoinCode } from '../../types'\r\nimport { currencies } from '../../constants'\r\n\r\nimport Input from '../Input'\r\nimport Select from '../Select'\r\n\r\ntype TProps = {\r\n  price: number,\r\n  currencyCode: TCoinCode,\r\n  currencyTargetCode: TCoinCode,\r\n  getPrice: (currencyCode: TCoinCode, currencyTargetCode: TCoinCode) => void\r\n}\r\n\r\nconst CurrencyConverterForm: React.FC<TProps> = ({ price, getPrice, currencyCode, currencyTargetCode }) => {\r\n  const [firstFieldValue, setFirstFieldValue] = useState<string>('0')\r\n  const [secondFieldValue, setSecondFieldValue] = useState<string>('0')\r\n\r\n  const options: JSX.Element[] = useMemo(() => Object.entries(currencies).map(([key, value]) => (\r\n    <option key={key} value={key}>{value}</option>\r\n  )), [currencies]) // eslint-disable-line\r\n\r\n  const changeFirstInput = (newValue: string) => {\r\n    setFirstFieldValue(newValue)\r\n    setSecondFieldValue((+newValue * price).toString())\r\n  }\r\n\r\n  const changeTargetInput = (newValue: string) => {\r\n    setSecondFieldValue(newValue)\r\n    setFirstFieldValue(newValue === '0' ? '0' : (+newValue / price).toString())\r\n  }\r\n\r\n  useEffect(() => {\r\n    changeFirstInput(firstFieldValue)\r\n  }, [currencyCode]) // eslint-disable-line\r\n\r\n  useEffect(() => {\r\n    changeTargetInput(secondFieldValue)\r\n  }, [currencyTargetCode]) // eslint-disable-line\r\n\r\n  return (\r\n    <div className='converter'>\r\n      <div className=\"converter-field input-group mt-2\">\r\n        <Input\r\n          valueType='number'\r\n          value={firstFieldValue}\r\n          onChange={changeFirstInput} />\r\n\r\n        <Select options={options} value={currencyCode}\r\n          onChange={(value: string) => getPrice(value as TCoinCode, currencyTargetCode)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"converter-field input-group mt-2\">\r\n        <Input\r\n          valueType='number'\r\n          value={secondFieldValue}\r\n          onChange={changeTargetInput} />\r\n\r\n        <Select options={options} value={currencyTargetCode}\r\n          onChange={(value: string) => getPrice(currencyCode, value as TCoinCode)}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrencyConverterForm\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport './currencyConverter.scss'\r\nimport { TCoinCode } from '../../types'\r\nimport { TRootState } from '../../store'\r\nimport { priceSelector, isFetchingSelector, currencyCodeSelector, currencyTargetCodeSelector } from '../../store/currencyConverter/selectors'\r\nimport { getPrice } from '../../store/currencyConverter/actions'\r\n\r\nimport CurrencyConverterForm from '../../components/CurrencyConverterForm'\r\nimport Loader from '../../components/Loader'\r\n\r\ntype TMapState = {\r\n  price: number,\r\n  isFetching: boolean,\r\n  currencyCode: TCoinCode,\r\n  currencyTargetCode: TCoinCode,\r\n}\r\n\r\ntype TMapDispatch = {\r\n  getPrice: (currencyCode: TCoinCode, currencyTargetCode: TCoinCode) => void\r\n}\r\n\r\ntype TProps = TMapState & TMapDispatch\r\n\r\nconst CurrencyConverter: React.FC<TProps> = ({ price, getPrice, isFetching, currencyCode, currencyTargetCode }) => {\r\n\r\n  useEffect(() => {\r\n    getPrice(currencyCode, currencyTargetCode)\r\n  }, [])  // eslint-disable-line\r\n\r\n  return (\r\n    <div className='currency-converter'>\r\n      <div className='d-flex justify-content-between'>\r\n        <span className='h5'>Currency converter</span>\r\n        {isFetching &&\r\n          <Loader className='d-inline align-text-top' small={true} center={false} />\r\n        }\r\n      </div>\r\n      <CurrencyConverterForm\r\n        price={price}\r\n        currencyCode={currencyCode}\r\n        currencyTargetCode={currencyTargetCode}\r\n        getPrice={getPrice}\r\n      />\r\n      <div className=\"currency-converter__price mt-2\">\r\n        {`1 ${currencyCode} = ${price} ${currencyTargetCode}`}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapState = (state: TRootState): TMapState => ({\r\n  price: priceSelector(state),\r\n  isFetching: isFetchingSelector(state),\r\n  currencyCode: currencyCodeSelector(state),\r\n  currencyTargetCode: currencyTargetCodeSelector(state),\r\n})\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, TRootState>(mapState, { getPrice })(CurrencyConverter)","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TRootState } from '../../store';\r\nimport { TCoinInfo } from '../../types';\r\nimport { getCoins } from '../../store/topCoinsList/actions'\r\nimport { coinsSelector, isFetchingSelector } from '../../store/topCoinsList/selectors';\r\n\r\nimport TopCoinsTable from '../../components/TopCoinsTable';\r\nimport Loader from '../../components/Loader';\r\nimport CurrencyConverter from '../../containers/CurrencyConverter';\r\n\r\ntype TStateProps = {\r\n  coins: TCoinInfo[],\r\n  isFetching: boolean\r\n}\r\ntype TDispatchProps = {\r\n  getCoins: () => void\r\n}\r\n\r\nconst HomePage: React.FC<TStateProps & TDispatchProps> = ({ coins, getCoins, isFetching }) => {\r\n  const coinsUpdateTimeMs = 130 * 1000\r\n  useEffect(() => {\r\n    getCoins()\r\n    const intervalUpdate = setInterval(() => {\r\n      getCoins()\r\n    }, coinsUpdateTimeMs)\r\n\r\n    return () => {\r\n      clearInterval(intervalUpdate)\r\n    }\r\n  }, []) // eslint-disable-line\r\n\r\n  return (\r\n    <section className=\"coins\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            {isFetching && !coins.length\r\n              ? <Loader />\r\n              : <>\r\n                {coins.length &&\r\n                  <TopCoinsTable coins={coins} />\r\n                }\r\n              </>\r\n            }\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <CurrencyConverter />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapState = (state: TRootState) => ({\r\n  coins: coinsSelector(state),\r\n  isFetching: isFetchingSelector(state)\r\n})\r\n\r\nexport default connect<TStateProps, TDispatchProps, {}, TRootState>(mapState, { getCoins })(HomePage);\r\n","import { currencies, imagesUrlServer } from './../../../constants';\r\nimport { TRootState } from './../../index';\r\nimport { TCoinCode, TCoinFullInfo } from './../../../types';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport api from '../../../api';\r\n\r\nconst COIN_INFO_LOAD_REQUEST = 'COIN_INFO/LOAD:REQUEST'\r\nconst COIN_INFO_LOAD_SUCCESS = 'COIN_INFO/LOAD:SUCCESS'\r\nconst COIN_INFO_LOAD_FAILURE = 'COIN_INFO/LOAD:FAILURE'\r\nconst COIN_INFO_RESET = 'COIN_INFO/RESET'\r\n\r\ntype TGetCoinInfoRequest = { type: typeof COIN_INFO_LOAD_REQUEST }\r\nconst getCoinInfoRequest = (): TGetCoinInfoRequest => ({\r\n  type: COIN_INFO_LOAD_REQUEST\r\n})\r\n\r\ntype TGetCoinInfoSuccess = { type: typeof COIN_INFO_LOAD_SUCCESS, payload: TCoinFullInfo }\r\nconst getCoinInfoSuccess = (payload: TCoinFullInfo): TGetCoinInfoSuccess => ({\r\n  type: COIN_INFO_LOAD_SUCCESS,\r\n  payload\r\n})\r\n\r\ntype TGetCoinInfoFailure = { type: typeof COIN_INFO_LOAD_FAILURE, payload: string }\r\nconst getCoinInfoFailure = (payload: string): TGetCoinInfoFailure => ({\r\n  type: COIN_INFO_LOAD_FAILURE,\r\n  payload\r\n})\r\n\r\ntype TResetCoinInfo = { type: typeof COIN_INFO_RESET }\r\nexport const resetCoinInfo = (): TResetCoinInfo => ({\r\n  type: COIN_INFO_RESET\r\n})\r\n\r\nexport type TActions = TGetCoinInfoRequest | TGetCoinInfoSuccess | TGetCoinInfoFailure | TResetCoinInfo\r\n\r\n\r\nexport const getCoinInfo = (coinCode: TCoinCode) => async (dispatch: Dispatch, getState: () => TRootState) => {\r\n  dispatch(getCoinInfoRequest())\r\n  try {\r\n    const targetCoinCode : TCoinCode= getState().coinInfo.targetCoinCode\r\n    const response = await api.coinInfo.getCoinInfo(coinCode,targetCoinCode)\r\n    const raw = response.RAW[coinCode][targetCoinCode]\r\n    \r\n    if (response.Response !== 'Error') {\r\n      const data: TCoinFullInfo = {\r\n        code: coinCode,\r\n        name: currencies[coinCode],\r\n        price: raw.PRICE,\r\n        mktcap: raw.MKTCAP,\r\n        directVol: raw.VOLUME24HOURTO,\r\n        totalVol: raw.TOTALVOLUME24HTO,\r\n        imageUrl: imagesUrlServer + raw.IMAGEURL,\r\n      }\r\n      dispatch(getCoinInfoSuccess(data))\r\n    } else {\r\n      getCoinInfoFailure('err')\r\n    }\r\n\r\n  } catch (e) {\r\n    getCoinInfoFailure(e)\r\n  }\r\n}","import React, { useEffect } from 'react'\r\nimport { RouteComponentProps, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { TRootState } from '../../store'\r\nimport { getCoinInfo, resetCoinInfo } from '../../store/coinInfo/actions'\r\nimport { TCoinCode, TCoinFullInfo } from '../../types'\r\nimport { currencies } from '../../constants'\r\nimport { isFetchingSelector, coinInfoSelector } from '../../store/coinInfo/selectors'\r\n\r\nimport Loader from '../../components/Loader'\r\n\r\ntype TMapState = {\r\n  coinInfo: TCoinFullInfo,\r\n  isFetching: boolean\r\n}\r\ntype TMapDispatch = {\r\n  getCoinInfo: (coinCode: TCoinCode) => void,\r\n  resetCoinInfo: () => void\r\n}\r\n\r\ntype TProps = RouteComponentProps & TMapState & TMapDispatch\r\n\r\nconst CoinPage: React.FC<TProps> = ({ match, getCoinInfo, resetCoinInfo, isFetching, coinInfo }) => {\r\n  // @ts-ignore\r\n  const coinCode: TCoinCode = match.params.code.toUpperCase()\r\n\r\n  const validCoinCode = currencies[coinCode]\r\n\r\n  useEffect(() => {\r\n    if (validCoinCode) {\r\n      getCoinInfo(coinCode)\r\n    }\r\n    return () => {\r\n      resetCoinInfo()\r\n    }\r\n  }, [coinCode]) // eslint-disable-line\r\n\r\n  if (!validCoinCode) {\r\n    return <Redirect to='/home' />\r\n  }\r\n\r\n  return (\r\n    <div className='coin'>\r\n      <div className=\"container\">\r\n        {isFetching\r\n          ? <Loader />\r\n          : <>\r\n            {coinInfo &&\r\n              <div className=\"coin-content\">\r\n                <h2>{coinInfo.name}</h2>\r\n                <h3>{coinInfo.code}</h3>\r\n              </div>\r\n            }\r\n          </>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapState = (state: TRootState): TMapState => {\r\n  return {\r\n    coinInfo: coinInfoSelector(state),\r\n    isFetching: isFetchingSelector(state)\r\n  }\r\n}\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, TRootState>(mapState, { getCoinInfo, resetCoinInfo })(CoinPage)\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './header.scss'\r\n\r\ntype TProps = {\r\n\r\n}\r\n\r\nconst Header: React.FC<TProps> = () => {\r\n\r\n  const logoUrl = 'https://uploads-ssl.webflow.com/5d5f02be87f780005e708e1f/5db01a351c624d3ecf624e6d_reactlogo.jpg'\r\n\r\n  return (\r\n    <div className='header'>\r\n      <div className=\"container\">\r\n        <div className=\"header-logo\">\r\n          <Link to='/'>\r\n            <img src={logoUrl} alt=\"logo\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport api from './api';\nimport { TRootState } from './store';\nimport { TCoinCode } from './types';\nimport { targetCoinCodeSelector } from './store/coinInfo/selectors';\n\nimport HomePage from './pages/HomePage';\nimport CoinPage from './pages/CoinPage';\nimport Header from './components/Header';\nimport { setCurrencies } from './constants';\n\ntype TMapState = {\n  targetCoinCode: TCoinCode\n}\n\nconst App: React.FC<TMapState> = ({ targetCoinCode }) => {\n\n  useEffect(() => {\n    try {\n      api.coinInfo.getCoinsBaseInfo(100, targetCoinCode).then(res => {\n        const coinsEntries = res.Data.map((row: any) => [row.SYMBOL, row.NAME])\n        const currencies = Object.fromEntries(coinsEntries)\n\n        if (currencies) {\n          setCurrencies(currencies)\n        }\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }, []) // eslint-disable-line\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Switch>\n        <Route exact path='/home' component={HomePage} />\n        <Route exact path='/coins/:code' component={CoinPage} />\n\n        <Redirect from='*' to='/home' />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapState = (state: TRootState): TMapState => ({\n  targetCoinCode: targetCoinCodeSelector(state)\n})\n\nexport default connect<TMapState, {}, {}, TRootState>(mapState)(App);\n","import { TActions } from '../actions';\r\nimport { TCoinInfo } from '../../../types';\r\n\r\nconst initialState = {\r\n  coins: [] as TCoinInfo[],\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState \r\n\r\nconst topCoinsReducer = (state = initialState, action: TActions) : TReducerState=> {\r\n  switch (action.type) {\r\n    case 'TOP_COINS/GET_COINS:SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        coins: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:FAILURE': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        _error: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:REQUEST' : {\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default topCoinsReducer","import { TActions } from './../actions';\r\nimport { TCoinCode } from './../../../types';\r\n\r\nconst initialState = {\r\n  currencyCode: 'BTC' as TCoinCode,\r\n  currencyTargetCode: 'USD' as TCoinCode,\r\n  price: 0 as number,\r\n\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState \r\n\r\nconst currencyConverterReducer = (state = initialState, action: TActions) : TReducerState=> {\r\n  switch (action.type) {\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:REQUEST': {\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    }\r\n\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:FAILURE': {\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        _error: action.payload\r\n      }\r\n    }\r\n\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        price: action.payload.price,\r\n        currencyCode: action.payload.currencyCode,\r\n        currencyTargetCode: action.payload.currencyTargetCode\r\n      }\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default currencyConverterReducer","import { TActions } from './../actions';\r\nimport { TCoinFullInfo, TCoinCode } from './../../../types';\r\n\r\nconst initialState = {\r\n  coinInfo: {} as TCoinFullInfo,\r\n  targetCoinCode: 'USD' as TCoinCode,\r\n\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState\r\n\r\nconst CoinInfoReducer = (state = initialState, action: TActions): TReducerState => {\r\n  switch (action.type) {\r\n    case 'COIN_INFO/LOAD:SUCCESS' : return {\r\n      ...state,\r\n      coinInfo: action.payload,\r\n      isFetching: false,\r\n      _error: ''\r\n    }\r\n\r\n    case 'COIN_INFO/LOAD:FAILURE' : return {\r\n      ...state,\r\n      isFetching: false,\r\n      _error: action.payload\r\n    }\r\n\r\n    case 'COIN_INFO/LOAD:REQUEST' : return {\r\n      ...state,\r\n      isFetching: true\r\n    }\r\n\r\n    case 'COIN_INFO/RESET' : return {\r\n      ...state,\r\n      coinInfo: {} as TCoinFullInfo\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default CoinInfoReducer","import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\n\r\nimport topCoinsListReducer from './topCoinsList/reducers';\r\nimport currencyConverterReducer from './currencyConverter/reducers';\r\nimport coinInfoReducer from './coinInfo/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  topCoinsList: topCoinsListReducer,\r\n  currencyConverter: currencyConverterReducer,\r\n  coinInfo: coinInfoReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nexport type TRootState = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}