{"version":3,"sources":["api/constants.ts","api/index.ts","api/prices.ts","api/cryptoCurrency.ts","store/topCoinsList/selectors/index.ts","components/TopCoinsTable/index.tsx","components/Loader/index.tsx","pages/CoinsPage/index.tsx","store/topCoinsList/actions/index.ts","constants.ts","App.tsx","store/topCoinsList/reducers/index.ts","store/index.ts","index.tsx"],"names":["BASE_URL","api","prices","getPrice","coin","targetCoins","url","join","axios","get","then","data","catch","e","console","error","cryptoCurrency","getTopList","limit","targetCoin","coinsSelector","state","coins","isFetchingSelector","isFetching","TopCoinsTable","className","scope","map","index","key","name","to","src","imageUrl","alt","fullName","price","mktcap","Loader","classNames","role","connect","getCoins","dispatch","a","type","response","Data","Type","CoinInfo","Name","FullName","DISPLAY","USD","PRICE","MKTCAP","ImageUrl","payload","useEffect","length","App","CoinsPage","initialState","_error","rootReducer","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cf91cb0.chunk.js","sourcesContent":["export const BASE_URL = 'https://min-api.cryptocompare.com/data/'\r\nexport const BASE_URL_v2 = 'https://min-api.cryptocompare.com/data/v2/'","import prices from './prices'\r\nimport cryptoCurrency from './cryptoCurrency'\r\n\r\nconst api = {\r\n  prices,\r\n  cryptoCurrency\r\n}\r\n\r\nexport default api","import { TCoinCode } from './../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getPrice: (coin: TCoinCode, targetCoins: TCoinCode[]) => {\r\n    const url = `${BASE_URL}price?fsym=${coin}&tsyms=${targetCoins.join(',')}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { TCoinCode } from '../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getTopList: (limit: number = 10, targetCoin: TCoinCode = 'USD') => {\r\n    const url = `${BASE_URL}top/mktcapfull?limit=${limit}&tsym=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { TReducerState } from '../reducers'\r\n\r\nexport const coinsSelector = (state: TReducerState) => state.coins\r\nexport const isFetchingSelector = (state: TReducerState) => state.isFetching","import React from 'react'\r\nimport { TCoinInfo } from '../../types'\r\n\r\nimport './topCoinsTable.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype TProps = {\r\n  coins: TCoinInfo[],\r\n}\r\n\r\nconst TopCoinsTable: React.FC<TProps> = ({ coins }) => (\r\n  <div className=\"top-coins\">\r\n    <h2>Top 10 crypto currency</h2>\r\n\r\n    <table className=\"table top-coins-table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col-2\">#</th>\r\n          <th scope=\"col\">Name</th>\r\n          <th scope=\"col\">Price</th>\r\n          <th scope=\"col\">Market cap.</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {coins.map((coin, index) => (\r\n          <tr key={coin.name}>\r\n            <th scope=\"row\">{++index}</th>\r\n            <td>\r\n              <Link to={coin.name} className='top-coins__coin-name'>\r\n                <img className='top-coins__coin-image' src={coin.imageUrl} alt='coin logo' />\r\n                <span className='top-coins__coin-text'>\r\n                  <strong>{coin.name}</strong>\r\n                  <br />\r\n                  <small>{coin.fullName}</small>\r\n                </span>\r\n              </Link>\r\n            </td>\r\n            <td>{coin.price}</td>\r\n            <td>{coin.mktcap}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n)\r\n\r\nexport default TopCoinsTable\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\ntype TProps = {\r\n  className?: string\r\n}\r\n\r\nconst Loader: React.FC<TProps> = ({ className }) => {\r\n  return (\r\n    <div className={classNames(\"d-flex justify-content-center\", className)}>\r\n      <div className=\"spinner-border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TRootState } from '../../store';\r\nimport { TCoinInfo } from '../../types';\r\nimport { getCoins } from '../../store/topCoinsList/actions'\r\nimport { coinsSelector, isFetchingSelector } from '../../store/topCoinsList/selectors';\r\n\r\nimport TopCoinsTable from '../../components/TopCoinsTable';\r\nimport Loader from '../../components/Loader';\r\n\r\ntype TStateProps = {\r\n  coins: TCoinInfo[],\r\n  isFetching: boolean\r\n}\r\ntype TDispatchProps = {\r\n  getCoins: () => void\r\n}\r\n\r\nconst CoinPage: React.FC<TStateProps & TDispatchProps> = ({ coins, getCoins, isFetching }) => {\r\n\r\n  useEffect(() => {\r\n    getCoins()\r\n  }, []) // eslint-disable-line\r\n\r\n  return (\r\n    <section className=\"coins mt-4\">\r\n      {isFetching\r\n        ? <Loader />\r\n        : <>\r\n          {coins.length\r\n            ? <TopCoinsTable coins={coins} />\r\n            : <p>no items</p>\r\n          }\r\n        </>\r\n      }\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapState = (state: TRootState) => ({\r\n  coins: coinsSelector(state),\r\n  isFetching: isFetchingSelector(state)\r\n})\r\n\r\nexport default connect<TStateProps, TDispatchProps, {}, TRootState>(mapState, { getCoins })(CoinPage);\r\n","import { imagesUrlServer } from './../../../constants';\r\nimport { TCoinInfo } from './../../../types';\r\nimport { Dispatch } from 'redux'\r\nimport api from '../../../api'\r\n\r\nconst GET_COINS = 'TOP_COINS/GET_COINS'\r\nconst GET_COINS_REQUEST = 'TOP_COINS/GET_COINS:REQUEST'\r\nconst GET_COINS_SUCCESS = 'TOP_COINS/GET_COINS:SUCCESS'\r\nconst GET_COINS_FAILURE = 'TOP_COINS/GET_COINS:FAILURE'\r\n\r\nexport type TActions = TGetCoinsRequest | TGetCoinsSuccess | TGetCoins | TGetCoinsFailure\r\n\r\ntype TGetCoinsRequest = { type: typeof GET_COINS_REQUEST }\r\nconst getCoinsRequest = () => ({\r\n  type: GET_COINS_REQUEST\r\n})\r\n\r\ntype TGetCoinsFailure = { type: typeof GET_COINS_FAILURE, payload: string }\r\nconst getCoinsFailure = (error: string) => ({\r\n  type: GET_COINS_FAILURE,\r\n  payload: error\r\n})\r\n\r\ntype TGetCoinsSuccess = { type: typeof GET_COINS_SUCCESS, payload: TCoinInfo[] }\r\nconst getCoinsSuccess = (payload: TCoinInfo[]) => ({\r\n  type: GET_COINS_SUCCESS,\r\n  payload\r\n})\r\n\r\ntype TGetCoins = { type: typeof GET_COINS }\r\nexport const getCoins = () => async (dispatch: Dispatch) => {\r\n  dispatch(getCoinsRequest())\r\n\r\n  try {\r\n    const response = await api.cryptoCurrency.getTopList()\r\n    const data = response.Data as any[]\r\n\r\n    if (response.Type === 100) {\r\n      const coins: TCoinInfo[] = data.map(coin => ({\r\n        name: coin.CoinInfo.Name,\r\n        fullName: coin.CoinInfo.FullName,\r\n        price: coin.DISPLAY.USD.PRICE,\r\n        mktcap: coin.DISPLAY.USD.MKTCAP,\r\n        imageUrl: imagesUrlServer + coin.CoinInfo.ImageUrl\r\n      }))\r\n\r\n      dispatch(getCoinsSuccess(coins))\r\n    }\r\n  } catch (e) {\r\n    getCoinsFailure(e)\r\n  }\r\n}\r\n\r\n","export const imagesUrlServer = 'https://www.cryptocompare.com'","import React from 'react';\nimport CoinsPage from './pages/CoinsPage';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <CoinsPage />\n          </div>\n          <div className=\"col-md-3\">\n            sidebar\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { TActions } from '../actions';\r\nimport { TCoinInfo } from '../../../types';\r\n\r\nconst initialState = {\r\n  coins: [] as TCoinInfo[],\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState \r\n\r\nconst topCoinsReducer = (state = initialState, action: TActions) => {\r\n  switch (action.type) {\r\n    case 'TOP_COINS/GET_COINS:SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        coins: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:FAILURE': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        _error: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:REQUEST' : {\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default topCoinsReducer","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\n\r\nimport topCoinsListReducer from './topCoinsList/reducers';\r\n\r\nconst rootReducer = topCoinsListReducer\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nexport type TRootState = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}