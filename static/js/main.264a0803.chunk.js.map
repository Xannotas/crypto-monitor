{"version":3,"sources":["constants.ts","api/constants.ts","api/index.ts","api/prices.ts","api/toplists.ts","store/topCoinsList/actions/index.ts","store/topCoinsList/selectors/index.ts","components/TopCoinsTable/index.tsx","components/Loader/index.tsx","pages/CoinsPage/index.tsx","store/currencyConverter/selectors/index.ts","store/currencyConverter/actions/index.ts","components/Input/index.tsx","components/Select/index.tsx","components/CurrencyConverterForm/index.tsx","containers/CurrencyConverter/index.tsx","App.tsx","store/topCoinsList/reducers/index.ts","store/currencyConverter/reducers/index.ts","store/index.ts","index.tsx"],"names":["currencies","BASE_URL","api","prices","getPrice","coin","targetCoin","url","axios","get","then","data","catch","e","console","error","toplists","getTopListByMarketCap","limit","getCoinsFailure","type","payload","coinsSelector","state","topCoinsList","coins","isFetchingSelector","isFetching","TopCoinsTable","className","scope","map","index","key","name","to","src","imageUrl","alt","fullName","price","mktcap","Loader","center","classNames","role","connect","getCoins","dispatch","a","response","Data","Type","CoinInfo","Name","FullName","DISPLAY","USD","PRICE","MKTCAP","ImageUrl","useEffect","length","priceSelector","currencyConverter","getPriceFailure","Input","placeholder","value","onChange","valueType","input","currentTarget","replace","Select","options","CurrencyConverterForm","onCurrencyChange","defaultCurrency","defaultTargetCurrency","useState","firstFieldValue","setFirstFieldValue","secondFieldValue","setSecondFieldValue","firstCurrency","setFirstCurrency","secondCurrency","setSecondCurrency","useMemo","Object","entries","onInputChange","newValue","setCurrentFieldValue","setTargetFieldValue","targetPrice","currency","targetCurrency","aria-hidden","App","CoinsPage","initialState","_error","topCoinsReducer","action","currencyCode","targetCurrencyCode","currencyConverterReducer","rootReducer","combineReducers","topCoinsListReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.264a0803.chunk.js","sourcesContent":["export const imagesUrlServer = 'https://www.cryptocompare.com'\r\n\r\nexport const currencies = {\r\n  'USD': 'United States Dollar',\r\n  'RUB': 'Russian Ruble',\r\n  'EUR': 'Euro',\r\n\r\n  'BTC': 'Bitcoin',\r\n  'ETH': 'Ethereum',\r\n  'ADA': 'Cardano',\r\n  'BCH': 'Bitcoin Cash',\r\n  'XRP': 'XRP',\r\n  'EOS': 'EOS',\r\n  'LTC': 'Litecoin',\r\n  'ETC': 'Ethereum Classic',\r\n  'BSV': 'Bitcoin SV',\r\n  'TRX': 'TRON',\r\n  'XLM': 'Stellar',\r\n  'BNB': 'Binance Coin',\r\n  'LINK': 'Chainlink',\r\n  'XTZ': 'Tezos',\r\n  'NEO': 'NEO',\r\n  'ZEC': 'ZCash',\r\n  'DASH': 'Dash',\r\n  'ATOM': 'Cosmos',\r\n  'ONT': 'Ontology',\r\n  'THETA': 'Theta',\r\n  'ZIL': 'Zilliqa',\r\n  'MIOTA': 'IOTA',\r\n  'HYN': 'Hyperion',\r\n  'MATIC': 'Matic Network',\r\n  'CRO': 'Crypto.com Chain',\r\n  'BAT': 'Basic Attention Token',\r\n  'GTO': 'GIFTO',\r\n}","export const BASE_URL = 'https://min-api.cryptocompare.com/data/'\r\nexport const BASE_URL_v2 = 'https://min-api.cryptocompare.com/data/v2/'","import prices from './prices'\r\nimport toplists from './toplists'\r\n\r\nconst api = {\r\n  prices,\r\n  toplists\r\n}\r\n\r\nexport default api","import { TCoinCode } from './../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getPrice: (coin: TCoinCode, targetCoin: TCoinCode) => {\r\n    const url = `${BASE_URL}price?fsym=${coin}&tsyms=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { TCoinCode } from '../types';\r\nimport axios from 'axios'\r\nimport { BASE_URL } from './constants';\r\n\r\nexport default {\r\n  getTopListByMarketCap: (limit: number = 10, targetCoin: TCoinCode = 'USD') => {\r\n    const url = `${BASE_URL}top/mktcapfull?limit=${limit}&tsym=${targetCoin}`\r\n\r\n    return axios.get(url).then(({ data }) => data).catch(e => {\r\n      console.error(e)\r\n    })\r\n  }\r\n}","import { imagesUrlServer } from './../../../constants';\r\nimport { TCoinInfo } from './../../../types';\r\nimport { Dispatch } from 'redux'\r\nimport api from '../../../api'\r\n\r\nconst GET_COINS_REQUEST = 'TOP_COINS/GET_COINS:REQUEST'\r\nconst GET_COINS_SUCCESS = 'TOP_COINS/GET_COINS:SUCCESS'\r\nconst GET_COINS_FAILURE = 'TOP_COINS/GET_COINS:FAILURE'\r\n\r\nexport type TActions = TGetCoinsRequest | TGetCoinsSuccess  | TGetCoinsFailure\r\n\r\ntype TGetCoinsRequest = { type: typeof GET_COINS_REQUEST }\r\nconst getCoinsRequest = () => ({\r\n  type: GET_COINS_REQUEST\r\n})\r\n\r\ntype TGetCoinsFailure = { type: typeof GET_COINS_FAILURE, payload: string }\r\nconst getCoinsFailure = (error: string) => ({\r\n  type: GET_COINS_FAILURE,\r\n  payload: error\r\n})\r\n\r\ntype TGetCoinsSuccess = { type: typeof GET_COINS_SUCCESS, payload: TCoinInfo[] }\r\nconst getCoinsSuccess = (payload: TCoinInfo[]) => ({\r\n  type: GET_COINS_SUCCESS,\r\n  payload\r\n})\r\n\r\nexport const getCoins = () => async (dispatch: Dispatch) => {\r\n  dispatch(getCoinsRequest())\r\n\r\n  try {\r\n    const response = await api.toplists.getTopListByMarketCap()\r\n    const data = response.Data as any[]\r\n\r\n    if (response.Type === 100) {\r\n      const coins: TCoinInfo[] = data.map(coin => ({\r\n        name: coin.CoinInfo.Name,\r\n        fullName: coin.CoinInfo.FullName,\r\n        price: coin.DISPLAY.USD.PRICE,\r\n        mktcap: coin.DISPLAY.USD.MKTCAP,\r\n        imageUrl: imagesUrlServer + coin.CoinInfo.ImageUrl\r\n      }))\r\n\r\n      dispatch(getCoinsSuccess(coins))\r\n    } else {\r\n      getCoinsFailure('Cannot load data from server.')\r\n    }\r\n  } catch (e) {\r\n    getCoinsFailure(e)\r\n  }\r\n}\r\n\r\n","import { TRootState } from '../..'\r\n\r\nexport const coinsSelector = (state: TRootState) => state.topCoinsList.coins\r\nexport const isFetchingSelector = (state: TRootState) => state.topCoinsList.isFetching","import React from 'react'\r\nimport { TCoinInfo } from '../../types'\r\n\r\nimport './topCoinsTable.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype TProps = {\r\n  coins: TCoinInfo[],\r\n}\r\n\r\nconst TopCoinsTable: React.FC<TProps> = ({ coins }) => (\r\n  <div className=\"top-coins\">\r\n    <h2>Top 10 crypto currency</h2>\r\n\r\n    <table className=\"table top-coins-table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col-2\">#</th>\r\n          <th scope=\"col\">Name</th>\r\n          <th scope=\"col\">Price</th>\r\n          <th scope=\"col\">Market cap.</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {coins.map((coin, index) => (\r\n          <tr key={coin.name}>\r\n            <th scope=\"row\">{++index}</th>\r\n            <td>\r\n              <Link to={coin.name} className='top-coins__coin-name'>\r\n                <img className='top-coins__coin-image' src={coin.imageUrl} alt='coin logo' />\r\n                <span className='top-coins__coin-text'>\r\n                  <strong>{coin.name}</strong>\r\n                  <br />\r\n                  <small>{coin.fullName}</small>\r\n                </span>\r\n              </Link>\r\n            </td>\r\n            <td>{coin.price}</td>\r\n            <td>{coin.mktcap}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n)\r\n\r\nexport default TopCoinsTable\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\ntype TProps = {\r\n  className?: string\r\n  center?: boolean\r\n}\r\n\r\nconst Loader: React.FC<TProps> = ({ className, center = true }) => {\r\n  return (\r\n    <div className={classNames({\"d-flex justify-content-center\" : center}, className)}>\r\n      <div className=\"spinner-border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TRootState } from '../../store';\r\nimport { TCoinInfo } from '../../types';\r\nimport { getCoins } from '../../store/topCoinsList/actions'\r\nimport { coinsSelector, isFetchingSelector } from '../../store/topCoinsList/selectors';\r\n\r\nimport TopCoinsTable from '../../components/TopCoinsTable';\r\nimport Loader from '../../components/Loader';\r\n\r\ntype TStateProps = {\r\n  coins: TCoinInfo[],\r\n  isFetching: boolean\r\n}\r\ntype TDispatchProps = {\r\n  getCoins: () => void\r\n}\r\n\r\nconst CoinPage: React.FC<TStateProps & TDispatchProps> = ({ coins, getCoins, isFetching }) => {\r\n  useEffect(() => {\r\n    getCoins()\r\n  }, []) // eslint-disable-line\r\n\r\n  return (\r\n    <section className=\"coins mt-4\">\r\n      {isFetching\r\n        ? <Loader />\r\n        : <>\r\n          {coins.length\r\n            ? <TopCoinsTable coins={coins} />\r\n            : <p>no items</p>\r\n          }\r\n        </>\r\n      }\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapState = (state: TRootState) => ({\r\n  coins: coinsSelector(state),\r\n  isFetching: isFetchingSelector(state)\r\n})\r\n\r\nexport default connect<TStateProps, TDispatchProps, {}, TRootState>(mapState, { getCoins })(CoinPage);\r\n","import { TRootState } from '../..'\r\n\r\nexport const priceSelector = (state: TRootState) => state.currencyConverter.price\r\nexport const isFetchingSelector = (state: TRootState) => state.currencyConverter.isFetching","import { TCoinCode } from './../../../types';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../../api'\r\n\r\nconst GET_PRICE_REQUEST = 'CURRENCY_CONVERTER/GET_PRICE:REQUEST'\r\nconst GET_PRICE_SUCCESS = 'CURRENCY_CONVERTER/GET_PRICE:SUCCESS'\r\nconst GET_PRICE_FAILURE = 'CURRENCY_CONVERTER/GET_PRICE:FAILURE'\r\n\r\ntype TGetPriceRequest = { type: typeof GET_PRICE_REQUEST }\r\nconst getPriceRequest = () => ({\r\n  type: GET_PRICE_REQUEST\r\n})\r\n\r\ntype TGetPriceFailure = { type: typeof GET_PRICE_FAILURE, payload: string }\r\nconst getPriceFailure = (error: string) => ({\r\n  type: GET_PRICE_FAILURE,\r\n  payload: error\r\n})\r\n\r\ntype TGetPriceSuccess = { type: typeof GET_PRICE_SUCCESS, payload: number }\r\nconst getPriceSuccess = (payload: number) => ({\r\n  type: GET_PRICE_SUCCESS,\r\n  payload\r\n})\r\n\r\nexport type TActions = TGetPriceRequest | TGetPriceFailure | TGetPriceSuccess\r\n\r\nexport const getPrice = (currency: TCoinCode, targetCurrency: TCoinCode) => async (dispatch: Dispatch) => {\r\n  dispatch(getPriceRequest())\r\n\r\n  try {\r\n    const response = await api.prices.getPrice(currency, targetCurrency)\r\n    const data: number = response[targetCurrency]\r\n    \r\n    if (data) {\r\n      dispatch(getPriceSuccess(data))\r\n    } else {\r\n      getPriceFailure('Cannot load data from server.')\r\n    }\r\n  } catch (e) {\r\n    getPriceFailure(e)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './input.scss'\r\n\r\ntype TProps = {\r\n  value: string,\r\n  onChange: (newValue: string) => void,\r\n\r\n  valueType?: 'number',\r\n  placeholder?: string,\r\n  type?: string,\r\n  className?: string,\r\n}\r\n\r\nconst Input: React.FC<TProps> = ({ className, placeholder, value, onChange, type, valueType }) => {\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let input = e.currentTarget.value\r\n    if (valueType === 'number') {\r\n      input = input.replace(/[^.\\d]+/g, \"\").replace(/^([^\\.]*\\.)|\\./g, '$1') // eslint-disable-line\r\n    }\r\n    onChange(input)\r\n  }\r\n\r\n  return (\r\n    <input\r\n      className={classNames('form-control', className)}\r\n      placeholder={placeholder}\r\n      type={type || 'text'}\r\n\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\ntype TProps = {\r\n  value: string,\r\n  onChange: (newValue: string) => void,\r\n  options: JSX.Element[],\r\n\r\n  className?: string,\r\n}\r\n\r\nconst Select: React.FC<TProps> = ({ value, onChange, options, className }) => {\r\n\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    onChange(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <select\r\n      className={classNames(\"custom-select\", className)}\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n    >{options}</select>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useState, useMemo } from 'react'\r\n\r\nimport './currencyConverterForm.scss'\r\nimport { TCoinCode } from '../../types'\r\nimport { currencies } from '../../constants'\r\n\r\nimport Input from '../Input'\r\nimport Select from '../Select'\r\n\r\ntype TProps = {\r\n  price: number,\r\n  defaultCurrency: TCoinCode,\r\n  defaultTargetCurrency: TCoinCode,\r\n  onCurrencyChange: (currency: TCoinCode, targetCurrency: TCoinCode) => void\r\n}\r\n\r\nconst CurrencyConverterForm: React.FC<TProps> = ({ price, onCurrencyChange, defaultCurrency, defaultTargetCurrency }) => {\r\n  const [firstFieldValue, setFirstFieldValue] = useState<string>('')\r\n  const [secondFieldValue, setSecondFieldValue] = useState<string>('')\r\n\r\n  const [firstCurrency, setFirstCurrency] = useState<TCoinCode>(defaultCurrency)\r\n  const [secondCurrency, setSecondCurrency] = useState<TCoinCode>(defaultTargetCurrency)\r\n\r\n  const options: JSX.Element[] = useMemo(() => Object.entries(currencies).map(([key, value]) => (\r\n    <option key={key} value={key}>{value}</option>\r\n  )), [currencies]) // eslint-disable-line\r\n\r\n  const onInputChange = (newValue: string, setCurrentFieldValue: Function, setTargetFieldValue: Function, targetPrice: number) => {\r\n    setCurrentFieldValue(newValue)\r\n    setTargetFieldValue(targetPrice)\r\n  }\r\n\r\n  return (\r\n    <div className='converter'>\r\n      <div className=\"converter-field input-group mt-2\">\r\n        <Input\r\n          valueType='number'\r\n          value={firstFieldValue}\r\n          onChange={(newValue) => onInputChange(newValue, setFirstFieldValue, setSecondFieldValue, +newValue * price)} />\r\n\r\n        <Select options={options} value={firstCurrency}\r\n          onChange={(value: string) => {\r\n            onCurrencyChange(value as TCoinCode, secondCurrency)\r\n            setFirstCurrency(value as TCoinCode)\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"converter-field input-group mt-2\">\r\n        <Input\r\n          valueType='number'\r\n          value={secondFieldValue}\r\n          onChange={(newValue) => onInputChange(newValue, setSecondFieldValue, setFirstFieldValue, +newValue / price)} />\r\n\r\n        <Select options={options} value={secondCurrency}\r\n          onChange={(value: string) => {\r\n            onCurrencyChange(firstCurrency, value as TCoinCode)\r\n            setSecondCurrency(value as TCoinCode)\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrencyConverterForm\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport './currencyConverter.scss'\r\nimport { TCoinCode } from '../../types'\r\nimport { TRootState } from '../../store'\r\nimport { priceSelector, isFetchingSelector } from '../../store/currencyConverter/selectors'\r\nimport { getPrice } from '../../store/currencyConverter/actions'\r\n\r\nimport CurrencyConverterForm from '../../components/CurrencyConverterForm'\r\n\r\ntype TMapState = {\r\n  price: number,\r\n  isFetching: boolean\r\n}\r\n\r\ntype TMapDispatch = {\r\n  getPrice: (currency: TCoinCode, targetCurrency: TCoinCode) => void\r\n}\r\n\r\ntype TProps = TMapState & TMapDispatch\r\n\r\nconst CurrencyConverter: React.FC<TProps> = ({ price, getPrice, isFetching }) => {\r\n  const defaultCurrency: TCoinCode = 'BTC'\r\n  const defaultTargetCurrency: TCoinCode = 'USD'\r\n  const onCurrencyChange = (currency: TCoinCode, targetCurrency: TCoinCode) => {\r\n    getPrice(currency, targetCurrency)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPrice(defaultCurrency, defaultTargetCurrency)\r\n  }, [])  // eslint-disable-line\r\n\r\n  return (\r\n    <div className='currency-converter'>\r\n      <h5>Currency converter\r\n        {isFetching &&\r\n          <span className=\"spinner-border spinner-border-sm ml-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n        }\r\n      </h5>\r\n      <CurrencyConverterForm\r\n        price={price}\r\n        onCurrencyChange={onCurrencyChange}\r\n        defaultCurrency={defaultCurrency}\r\n        defaultTargetCurrency={defaultTargetCurrency}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapState = (state: TRootState): TMapState => ({\r\n  price: priceSelector(state),\r\n  isFetching: isFetchingSelector(state),\r\n})\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, TRootState>(mapState, { getPrice })(CurrencyConverter)","import React from 'react';\nimport CoinsPage from './pages/CoinsPage';\nimport CurrencyConverter from './containers/CurrencyConverter';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <CoinsPage />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <CurrencyConverter />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { TActions } from '../actions';\r\nimport { TCoinInfo } from '../../../types';\r\n\r\nconst initialState = {\r\n  coins: [] as TCoinInfo[],\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState \r\n\r\nconst topCoinsReducer = (state = initialState, action: TActions) : TReducerState=> {\r\n  switch (action.type) {\r\n    case 'TOP_COINS/GET_COINS:SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        coins: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:FAILURE': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        _error: action.payload\r\n      }\r\n    }\r\n\r\n    case 'TOP_COINS/GET_COINS:REQUEST' : {\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default topCoinsReducer","import { TActions } from './../actions/index';\r\nimport { TCoinCode } from './../../../types';\r\nimport { } from '../actions';\r\n\r\nconst initialState = {\r\n  currencyCode: 'BTC' as TCoinCode,\r\n  targetCurrencyCode: 'USD' as TCoinCode,\r\n  price: 0 as number,\r\n\r\n  isFetching: false as boolean,\r\n  _error: '' as string\r\n}\r\n\r\nexport type TReducerState = typeof initialState \r\n\r\nconst currencyConverterReducer = (state = initialState, action: TActions) : TReducerState=> {\r\n  switch (action.type) {\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:REQUEST': {\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    }\r\n\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:FAILURE': {\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        _error: action.payload\r\n      }\r\n    }\r\n\r\n    case 'CURRENCY_CONVERTER/GET_PRICE:SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        price: action.payload\r\n      }\r\n    }\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default currencyConverterReducer","import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\n\r\nimport topCoinsListReducer from './topCoinsList/reducers';\r\nimport currencyConverterReducer from './currencyConverter/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  topCoinsList: topCoinsListReducer,\r\n  currencyConverter: currencyConverterReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nexport type TRootState = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}